# Copyright 2014 The Go Authors. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

# Binary operations with vectors on the left.

23 45 67 + 5
	28 50 72

23 45 67 + 1/3
	70/3 136/3 202/3

23 45 67 + iota 3
	24 47 70

23 45 67 + 12 33 56
	35 78 123

23 45 67 + 2 3 rho 12 33
	 35  78  79
	 56  57 100

23 45 67-5
	18 40 62

23 45 67 - 1e10
	-9999999977 -9999999955 -9999999933

23 45 67 - 1/3
	68/3 134/3 200/3

23 45 67 - iota 3
	22 43 64

23 45 67-2 3 rho iota 10
	22 43 64
	19 40 61

23 45 67*5
	115 225 335

23 45 67*1e10
	230000000000 450000000000 670000000000

23 45 67 * 1/3
	23/3 15 67/3

23 45 67 * iota 3
	23 90 201

23 45 67 * 2 3 rho iota 10
	 23  90 201
	 92 225 402

23 45 67 / 5
	23/5 9 67/5

23 45 67 / 1e10
	23/10000000000 9/2000000000 67/10000000000

23 45 67 / 1/3
	69 135 201

23 45 67 / iota 3
	23 45/2 67/3

23 45 67 / 2 3 rho iota 10
	  23 45/2 67/3
	23/4    9 67/6

23 45 67 div 4
	5 11 16

-23 45 67 div 1e10
	-1 0 0

23 45 67 idiv 4
	5 11 16

-23 45 67 idiv 4
	-5 11 16

23 45 67 mod 3
	2 0 1

-23 45 67 mod 3
	1 0 1

-23 45 67 imod 3
	-2 0 1

23 45 67 idiv 3
	7 15 22

2e11 idiv 1e10
	20

23 45 67 idiv iota 3
	23 22 22

23 45 67 idiv 2 3 rho iota 10
	23 22 22
	 5  9 11

23 45 67 imod 3
	2 0 1

2e11 imod 1e10+3
	9999999943

23 45 67 imod iota 3
	0 1 1

23 45 67 imod 2 3 rho iota 10
	0 1 1
	3 0 1

23 45 67 ** 5
	6436343 184528125 1350125107

23 45 67 ** iota 3
	23 2025 300763

23 45 67 ** 2 3 rho iota 10
	    23      2025      300763
	279841 184528125 90458382169

23 45 67 & 7
	7 5 3

23 45 67 & 2+1e10
	2 0 2

23 45 67 & iota 3
	1 0 3

23 45 67 &  2 3 rho iota 10
	1 0 3
	4 5 2

23 45 67 | 7
	23 47 71

23 45 67 | 2+1e10
	10000000023 10000000047 10000000067

23 45 67 | iota 3
	23 47 67

22 45 67 |  2 3 rho iota 10
	23 47 67
	22 45 71

23 45 67 ^ 7
	16 42 68

23 45 67 ^ 2e0
	21 47 65

23 45 67 ^ iota 3
	22 47 64

23 45 67 ^  2 3 rho iota 10
	22 47 64
	19 40 69

23 45 67 << 5
	736 1440 2144

23 45 67 << iota 3
	46 180 536

23 45 67 <<  2 3 rho iota 10
	  46  180  536
	 368 1440 4288

23 45 67 >> 5
	0 1 2

23 45 67 >> iota 3
	11 11 8

23 45 67 >>  2 3 rho iota 10
	11 11  8
	 1  1  1

23 45 5 == 5
	0 0 1

x=(1 2) 3 4 5; x==x
	(1 1) 1 1 1

x=(1 2) 3 4 5; y=1 (2 3) 4 5; x==y
	(1 0) (0 1) 1 1

x=(1 2) 3 4 5; y=1 (2 3) 4 5; y==x
	(1 0) (0 1) 1 1

x = iota 10; y=x; y[1]=0; x===x; x!==x; x===y; x!==y
	1 0 0 1

x=(1 0) 3 4 5; y=1 (2 4) 5 4; x<y
	(0 1) (0 1) 1 0

23 1e10 67 == 1e10
	0 1 0

23 1/3 67 == 1/3
	0 1 0

23 45 67 == -1 + 23 45 67 + iota 3
	1 0 0

23 45 67 ==  2 3 rho 22 + iota 10
	1 0 0
	0 0 0

23 5 67 != 5
	1 0 1

23 1e10 67 != 1e10
	1 0 1

23 1/3 67 != 1/3
	1 0 1

23 45 67 != -1 + 23 45 67 + iota 3
	0 1 1

23 45 67 !=  2 3 rho 22 + iota 10
	0 1 1
	1 1 1

23 45 3 < 5
	0 0 1

23 3e10 67 < 2e10
	1 0 1

23 1/4 67 < 1/3
	0 1 0

23 45 67 < -1 + 23 45 67 + iota 3
	0 1 1

23 45 67 <  2 3 rho 22 + iota 6
	0 0 0
	1 0 0

23 5 67 <= 5
	0 1 0

23 4e10 67 <= 3e10
	1 0 1

23 45 67 <= 22 45 67 + 1/3
	0 1 1

23 45 67 <=  2 3 rho 22 + iota 10
	1 0 0
	1 0 0

23 5 67 > 5
	1 0 1

23 4e10 67 > 3e10
	0 1 0

23 -45 67 > 1/3
	1 0 1

23 45 67 > -2 + 23 45 67 + iota 3
	1 0 0

23 45 67 >  2 3 rho 21 + iota 10
	1 1 1
	0 1 1

23 4 67 >= 5
	1 0 1

23 3e10 67 >= 3e10
	0 1 0

23 1/4 67 >= 1/3
	1 0 1

23 45 67 >= -2 + 23 45 67 + iota 3
	1 1 0

23 45 67 >=  2 3 rho 22 + iota 10
	1 1 1
	0 1 1

23 0 67 and 5
	1 0 1

23 0 67 and 1e10
	1 0 1

23 0 67 and 1/3
	1 0 1

23 0 67 and  iota 3
	1 0 1

23 0 67 and 2 3 rho -1 + iota 10
	0 0 1
	1 0 1

23 0 67 or 5
	1 1 1

23 0 67 or 0
	1 0 1

23 45 67 or 1e10
	1 1 1

23 45 67 or 1/3
	1 1 1

23 45 67 or -2 + -2 + 23 45 67 + iota 3
	1 1 1

0 or -2 + iota 3
	1 0 1

23 45 67 or -2 + 2 3 rho 21 + iota 10
	1 1 1
	1 1 1

23 0 67 xor 3
	0 1 0

23 0 67 xor 0
	1 0 1

23 0 67 xor 1e10
	0 1 0

23 0 67 xor 1/3
	0 1 0

23 0 67 xor -1 + iota 3
	1 1 0

1 xor -2+ 2 3 rho iota 10
	0 1 0
	0 0 0

0 1 2 nand 0
	1 1 1

0 1 2 nand 1
	1 0 0

0 1 2 nand 1
	1 0 0

23 0 67 nand 1e10
	0 1 0

23 0 67 nand 1/3
	0 1 0

23 0 67 nand -2 + iota 3
	0 1 0

23 0 67  nand -2 + 2 3 rho iota 10
	0 1 0
	0 1 0

23 0 67  nor 0
	0 1 0

23 0 67  nor 1
	0 0 0

23 0 67 nor 0
	0 1 0

23 0 67  nor 1
	0 0 0

23 0 67 nor 1e10
	0 0 0

23 0 67  nor 1/3
	0 0 0

23 0 67  nor -2 + iota 3
	0 1 0

23 0 67  nor -2 + 2 3 rho iota 10
	0 1 0
	0 0 0

23 45 67 iota 23 45 67 3e10 4e10
	1 2 3 0 0

1 3 5 7 9 iota 3 3 rho iota 9
	1 0 2
	0 3 0
	4 0 5

)origin 0
1 3 5 7 9 iota 3 3 rho 1 + iota 9
	 0 -1  1
	-1  2 -1
	 3 -1  4

23 3 67 min 5
	5 3 5

23 2e10 67 min 1e10
	23 10000000000 67

23 1/4 67 min 1/3
	1/3 1/4 1/3

23 45 67 min iota 3
	1 2 3

23 45 67 min  2 3 rho 20 + iota 10
	21 22 23
	23 25 26

23 2 67 max 5
	23 5 67

23 4e10 67 max 3e10
	30000000000 40000000000 30000000000

23 1/4 67 max 1/3
	23 1/3 67

23 45 67 max -2 + 23 45 67 + iota 3
	23 45 68

23 45 67 max 2 3 rho 21 + iota 10
	23 45 67
	25 45 67

23 45 67 , 5
	23 45 67 5

23 45 67 , 1e10
	23 45 67 10000000000

23 45 67 , 1/3
	23 45 67 1/3

23 45 67 , iota 3
	23 45 67 1 2 3

23 45 67 iota 1e10 23 45 67 3e10
	0 1 2 3 0

11 22 33[2]
	22

11 22 33[3 2]
	33 22

11 22 33 44 [2 3 rho iota 4]
	11 22 33
	44 11 22

4 3 2 1[up 4 3 2 1]
	1 2 3 4

1 2 3 4[down 1 2 3 4]
	4 3 2 1

rho 11 22 33[3 2 1]
	3

rho 11 22 33[2 3]
	2

rho rho 11 22 33[2]
	0

rho 11 22 33[1 rho 2]
	1

(6 2 rho "abcdefghijkl") [3 2 rho iota 6]
	ab
	cd

	ef
	gh

	ij
	kl

rho (6 2 rho "abcdefghijkl") [3 2 rho iota 6]
	3 2 2

x = 1 rho 1; rho x[up x]
	1

up 'ab' 'ac' 'aa'
	3 1 2

3 sel 1
	1 1 1

1 2 -2 1 0 3 sel 3 4 5 6 7 8
	3 4 4 0 0 6 8 8 8

(0 rho 0) part (0 rho 0)
	#

1 part 1
	(1)

x='hello world    '; (x != ' ') part x
	(hello) (world)

1 2 3 3 4 part 'abcde'
	(a) (b) (cd) (e)

(iota 10) part (iota 10)
	(1) (2) (3) (4) (5) (6) (7) (8) (9) (10)

3 fill 1
	1 1 1

1 2 0 1 -2 3 fill 3 4 5 6
	3 4 4 0 5 0 0 6 6 6

# Blanks fill in char vectors.
1 1 1 1 0 1 fill "hello"
	hell o

1 rot 1 2 3 4 5
	 2 3 4 5 1

-1 rot 1 2 3 4 5
	 5 1 2 3 4

6 rot "hello,world!"
	world!hello,

1 flip 1 2 3 4 5
	2 3 4 5 1

6 flip "hello,world!"
	world!hello,

-1 3 4 in iota 10
	0 1 1

'abcde' in 'hello world'
	0 0 0 1 1

1 in 1
	1

1 in 'abc'
	0

'a' in 1 2 3
	0

1 2 'a' 3 in 'a'
	0 0 1 0

'abc'[3 4 rho iota 3]
	abca
	bcab
	cabc

" *"[1+x o.>= x=iota 3]
	*
	**
	***

0 take iota 10
	#

0 drop iota 10
	1 2 3 4 5 6 7 8 9 10

3 take iota 10
	1 2 3

10 take iota 3  # zero fill
	1 2 3 0 0 0 0 0 0 0

# Fill with non-scalar.
x = 3 rho iota 3; y = 1 take x x; 2 take y
	(1 2 3) (0 0 0)

-3 take iota 10
	8 9 10

-10 take iota 3  # zero fill
	0 0 0 0 0 0 0 1 2 3

3 drop iota 10
	4 5 6 7 8 9 10

10 drop iota 3
	#

-3 drop iota 10
	1 2 3 4 5 6 7

-10 drop iota 3
	#

# used to append into x[:2]!
x = 1 2 3 4 5
(2 take x), 6 7
x
	1 2 6 7
	1 2 3 4 5

# Example inspired by @p9luv.
op circle n = " *"[1+(y o.+ y=((-n+1)+iota (1+2*n))**2) <= n**2]
circle 10
	          *
	      *********
	    *************
	   ***************
	  *****************
	  *****************
	 *******************
	 *******************
	 *******************
	 *******************
	*********************
	 *******************
	 *******************
	 *******************
	 *******************
	  *****************
	  *****************
	   ***************
	    *************
	      *********
	          *

# Encode (the names encode and decode seem backwards to me, but that's APL for ya.)
2 encode 3
	1

(7 rho 3) encode 1277
	1 2 0 2 0 2 2

2 encode iota 10
	1 0 1 0 1 0 1 0 1 0

(4 rho 2 ) encode iota 10
	0 0 0 0 0 0 0 1 1 1
	0 0 0 1 1 1 1 0 0 0
	0 1 1 0 0 1 1 0 0 1
	1 0 1 0 1 0 1 0 1 0

# 1254057 seconds in days, hours, minutes, and seconds.
0 24 60 60 encode 1254057
	14 12 20 57

# Decode
2 decode 1 0 1 0 1
	21

# Octal.
8 decode 3 7 7
	255

# 14 days, 12 hours, 20 minutes, 57 seconds as seconds.
0 24 60 60 decode 14 12 20 57
	1254057

1 2 3 4 decode 3
	123

(1 2 3 4 decode 3) == 1 2 3 4 decode 3 3 3 3
	1

2 2 2 2 encode 5 5 rho iota 25
	0 0 0 0 0
	0 0 1 1 1
	1 1 1 1 1
	0 0 0 0 0
	0 0 0 1 1

	0 0 0 1 1
	1 1 0 0 0
	0 1 1 1 1
	0 0 0 0 1
	1 1 1 0 0

	0 1 1 0 0
	1 1 0 0 1
	1 0 0 1 1
	0 0 1 1 0
	0 1 1 0 0

	1 0 1 0 1
	0 1 0 1 0
	1 0 1 0 1
	0 1 0 1 0
	1 0 1 0 1

# Encode non-integer values.

0 24 60 60 encode 1234567
	14 6 56 7

0 24 60 60 encode 1234567.89
	14 6 56 789/100

0 24 60 60 encode float 1234567.5
	14 6 56 7.5

2 2 2 2 decode 2 2 2 2 encode 5 5 rho iota 25
	 1  2  3  4  5
	 6  7  8  9 10
	11 12 13 14 15
	 0  1  2  3  4
	 5  6  7  8  9

0 2 2 2 decode 0 2 2 2 encode 5 5 rho iota 25
	 1  2  3  4  5
	 6  7  8  9 10
	11 12 13 14 15
	16 17 18 19 20
	21 22 23 24 25

2 2 2 2 decode 1 take 2 2 2 2 encode 5 5 rho iota 25
	 0  0  0  0  0
	 0  0 15 15 15
	15 15 15 15 15
	 0  0  0  0  0
	 0  0  0 15 15

10 decode 3 3 rho iota 9
	147 258 369

1 2 3 union 2 3 4
	1 2 3 4

# Values compare regardless of type
1j0 1 (float 1) union 1/1
	1j0 1 1

'abc' union 'cba'
	abc

3 union 1 2 3 4
	3 1 2 4

2 union 1 2 3 4 1 2 3 4
	2 1 3 4 1 3 4

(iota 0) union (iota 0)
	#

(iota 0) union 1
	1

(iota 0) union 1 2
	1 2

1 union (iota 0)
	1

1 2 union (iota 0)
	1 2

# Chars are extra tricky
1 2 'a' 'b' 'c' 3 4 union 2 'c' 'b' 'a' 5 1 'x'
	1 2 a b c 3 4 5 x

1 2 'abc' 3 4 union 2 'cba' 5 1 'x'
	1 2 (abc) 3 4 (cba) 5 x

1j0 2j0 3j1 3j2 union 2 3j1 4 3j3
	1j0 2j0 3j1 3j2 4 3j3

1 2 3 intersect 2 3 4
	2 3

3 intersect 3 3 3
	3

3 intersect 1 2 3 1 2 3
	3

5 intersect 1 2 3 1 2 3
	#

# Values compare regardless of type
1j0 1 (float 1) intersect 1/1
	1j0 1 1

'abc' intersect 'bcd'
	bc

(iota 0) intersect iota 0
	#

(iota 0) intersect 1
	#

(iota 0) intersect 1 2
	#

1 intersect iota 0
	#

1 2 intersect iota 0
	#

x =(,\iota 4); y = box 1 2 3; x; '\n'; y; '\n'; x iota y
	1 (1 2) (1 2 3) (1 2 3 4)
	(1 2 3)
	3

# Chars are extra tricky
1 2 'a' 'b' 'c' 3 4 intersect 2 'c' 'a' 5 1 'x'
	1 2 a c

1 2 'abc' 'd' 3 4 intersect 2 'ca' 'd' 5 1 'x'
	1 2 d

1 2 'abc' 'd' 3 4 'xyz' intersect 2 'abc' 'd' 5 1 'x'
	1 2 (abc) d

1j0 2j0 3j1 3j2 intersect 2 3j1 4 3j3
	2j0 3j1

# Performance test. Should be almost instantaneous,
# but naive implementation would be slow.
x=iota 100000; y=x intersect x; z = x union x; +/y==z
	100000

# Fixed bug: don't use user-defined functions in core calculations.
op a mod b = 99
op a div b = 99
10 decode 3 3 rho iota 9
	147 258 369

# Odd APL semantics: fill with zeros reshaping empty vector.
3 rho iota 0
	0 0 0

# In APL, the matrix division operator on two real vectors
# gives the magnitude of the projection of x onto y.
# See https://aplwiki.com/wiki/Matrix_Divide
x y=(2 7)(3 1); x mdiv y
	13/10

x y=(2 7)(3 1); y * x mdiv y # Vector projection of x onto y
	39/10 13/10

x y=(2 7)(3 1); x-y*x mdiv y # Remaining component of x
	-19/10 57/10

# Generalized vector assignment
a (b c) d = 1 (2 3) 4
a b c d
	1 2 3 4

# Vector assignment used to double-evaluate rhs (1 2 4 in output)
n = 0
op f x = n=n+1; x
x y = (f 1) (f 2)
x y n
	1 2 2

# Used to evaluate the leftmost v before the index list,
# so that v=iota 3 hadn't run and v was undefined.
v[+(v=iota 3) in 1 2 3]
	1 1 1
